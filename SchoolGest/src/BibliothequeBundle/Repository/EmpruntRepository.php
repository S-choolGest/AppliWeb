<?php

namespace BibliothequeBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * EmpruntRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmpruntRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllByBibliotheque($id_biblio)
    {
        $query = $this->getEntityManager()->createQuery('select e from BibliothequeBundle:Emprunt e where e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.idBibliotheque = :id_biblio) ')
        ->setParameter('id_biblio', $id_biblio);
        return $query->getResult();
    }

    public function findOneByBibliotheque($id_biblio, $id)
    {
        $query = $this->getEntityManager()->createQuery('select e from BibliothequeBundle:Emprunt e where (e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.idBibliotheque = :id_biblio))
        and 
            (e.id = :id)')
            ->setParameters(['id_biblio' => $id_biblio, 'id' => $id]);
        return $query->getResult();
    }

    public function findAllRecentByBibliotheque($id_biblio)
    {
        $query = $this->getEntityManager()->createQuery('select e from BibliothequeBundle:Emprunt e where e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.idBibliotheque = :id_biblio) 
        order by e.dateemprunt desc')
            ->setParameter('id_biblio', $id_biblio)
            ->setMaxResults(3);
        return $query->getResult();
    }

    public function findAllByBibliothequeCategorie($id_biblio, $categorie)
    {
        $query = $this->getEntityManager()->createQuery('select e from BibliothequeBundle:Emprunt e where (e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.idBibliotheque = :id_biblio)) 
            and 
            (e.etat = :categorie) ')
            ->setParameter('id_biblio', $id_biblio)
            ->setParameter('categorie', $categorie);
        return $query->getResult();
    }

    public function findAllByLivre_front($iduser, $categorie)
    {
        $query = $this->getEntityManager()->createQuery('select e from BibliothequeBundle:Emprunt e where (e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.categorie = :categorie)) 
            and 
            (e.idemprunteur = :iduser) ')
            ->setParameter('iduser', $iduser)
            ->setParameter('categorie', $categorie);
        return $query->getResult();
    }

    public function findAllByLivre($id_biblio, $categorie)
    {
        $query = $this->getEntityManager()->createQuery('select e from BibliothequeBundle:Emprunt e where (e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.idBibliotheque = :id_biblio and 
        l.categorie = :categorie
        )) ')
            ->setParameter('id_biblio', $id_biblio)
            ->setParameter('categorie', $categorie);
        return $query->getResult();
    }

    public function countByEtat($id_biblio, $etat)
    {
        $query = $this->getEntityManager()->createQuery('select count(e) from BibliothequeBundle:Emprunt e where (e.idlivre in (select l.id from BibliothequeBundle:Livre l where l.idBibliotheque = :id_biblio))
        and 
        e.etat = :etat')
            ->setParameters(['etat'=> $etat, 'id_biblio' => $id_biblio]);
        try {
            return $query -> getSingleResult();
        } catch (NoResultException $e) {
            return null;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    public function countFrontByEtat($iduser, $etat)
    {
        $query = $this->getEntityManager()->createQuery('select count(e) from BibliothequeBundle:Emprunt e where e.etat = :etat and e.idemprunteur = :iduser')
            ->setParameters(['etat' => $etat, 'iduser' => $iduser]);
        try {
            return $query -> getSingleResult();
        } catch (NoResultException $e) {
            return null;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    public function LivresLesPlusDemandes($biblio)
    {
        $query = $this->getEntityManager()->createQuery('select l,  (select count(e) from BibliothequeBundle:Emprunt e group by e.idlivre) as nbEmprunt from BibliothequeBundle:Emprunt l order by nbEmprunt')
            ->setMaxResults(5);
        return $query->getResult();
    }

    public function findByIdEmprunteur($iduser, $idbiblio)
    {
        $query = $this->getEntityManager()->createQuery('select e, l, u from BibliothequeBundle:Emprunt e inner join e.idlivre l inner join e.idemprunteur u where e.idemprunteur = :iduser and l.idBibliotheque = :idbiblio order by e.id desc')
            ->setParameter('iduser', $iduser)
            ->setParameter('idbiblio', $idbiblio);
        return $query->getArrayResult();
    }

    public function findByIdBiblio($idbiblio)
    {
        $query = $this->getEntityManager()->createQuery('select e, l, u from BibliothequeBundle:Emprunt e inner join e.idlivre l inner join e.idemprunteur u where l.idBibliotheque = :idbiblio order by e.id desc')
            ->setParameter('idbiblio', $idbiblio);
        return $query->getArrayResult();
    }

    public function rechercher_empruntFront($iduser, $mot, $categorie, $biblio)
    {
        $query = $this->getEntityManager()->createQuery('select e, l from BibliothequeBundle:Emprunt e inner join e.idlivre l 
        where e.idemprunteur = :iduser and l.idBibliotheque = :biblio and l.categorie = :categorie and (e.dateconfirmation like :mot or e.dateemprunt like :mot 
        or e.daterendu like :mot or e.datedebut like :mot or e.datefin like :mot or 
        l.titre like :mot or l.editeur like :mot or l.auteur like :mot 
        or l.datesortie like :mot or l.taille like :mot or l.quantite like :mot or l.dateajout like :mot) order by e.id desc')
            ->setParameter('iduser', $iduser)
            ->setParameter('categorie', $categorie)
            ->setParameter('biblio', $biblio)
            ->setParameter('mot', '%'.$mot.'%');
        return $query->getArrayResult();
    }

    public function Mrechercher_empruntFront($iduser, $mot, $biblio)
    {
        $query = $this->getEntityManager()->createQuery('select e, l, u from BibliothequeBundle:Emprunt e inner join e.idlivre l inner join e.idemprunteur u
        where e.idemprunteur = :iduser and l.idBibliotheque = :biblio and (l.categorie like :mot or e.dateconfirmation like :mot or e.dateemprunt like :mot 
        or e.daterendu like :mot or e.datedebut like :mot or e.datefin like :mot or 
        l.titre like :mot or l.editeur like :mot or l.auteur like :mot 
        or l.datesortie like :mot or l.taille like :mot or l.quantite like :mot or l.dateajout like :mot or e.etat like :mot) order by e.id desc')
            ->setParameter('iduser', $iduser)
            ->setParameter('biblio', $biblio)
            ->setParameter('mot', '%'.$mot.'%');
        return $query->getArrayResult();
    }

    public function Mrechercher_empruntBack($mot, $idbiblio)
    {
        $query = $this->getEntityManager()->createQuery('select e, l, u from BibliothequeBundle:Emprunt e inner join e.idlivre l inner join e.idemprunteur u
        where l.idBibliotheque = :biblio and (l.categorie like :mot or e.dateconfirmation like :mot or e.dateemprunt like :mot 
        or e.daterendu like :mot or e.datedebut like :mot or e.datefin like :mot or 
        l.titre like :mot or l.editeur like :mot or l.auteur like :mot 
        or l.datesortie like :mot or l.taille like :mot or l.quantite like :mot or l.dateajout like :mot or e.etat like :mot) order by e.id desc')
            ->setParameter('biblio', $idbiblio)
            ->setParameter('mot', '%'.$mot.'%');
        return $query->getArrayResult();
    }
}
